// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BEGINNER
  INFLUENCER
  INSTRUCTOR
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  profile Profile?
  role    Role
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Farm {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  coffeeProducts CoffeeProduct[]
}

model ProcessingMethod {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  coffeeBeans CoffeeBean[]
}

model Roaster {
  id          Int             @id @default(autoincrement())
  name        String
  location    String
  website     String?
  contactInfo String?
  specialtyId Int
  products    CoffeeProduct[]
  specialty   Specialty       @relation(fields: [specialtyId], references: [id])
}

model Specialty {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  roasters    Roaster[]
}

model CoffeeBean {
  id                 Int              @id @default(autoincrement())
  name               String
  type               String
  processingMethodId Int
  flavorNotes        String?
  roastLevel         RoastLevel
  certification      String?
  harvestDate        DateTime
  products           CoffeeProduct[]
  processingMethod   ProcessingMethod @relation(fields: [processingMethodId], references: [id])
}

model CoffeeProduct {
  id            Int          @id @default(autoincrement())
  name          String
  beanId        Int
  farmId        Int
  roasterId     Int
  tracebilityId Int
  weight        Float
  price         Float
  roastDate     DateTime
  shelfLife     Int
  farm          Farm         @relation(fields: [farmId], references: [id])
  bean          CoffeeBean   @relation(fields: [beanId], references: [id])
  roaster       Roaster      @relation(fields: [roasterId], references: [id])
  tracebility   Traceability @relation(fields: [tracebilityId], references: [id])
  reviews       Review[]
  recipes       Recipe[]
}

model BrewMethod {
  id                   Int      @id @default(autoincrement())
  name                 String
  recommendedGrindSize String
  waterTemperature     Float
  brewingTime          Int
  coffeeToWaterRatio   Float
  recepies             Recipe[]
}

model Review {
  id           Int           @id @default(autoincrement())
  productId    Int
  reviewerName String
  rating       Int
  comments     String?
  reviewDate   DateTime
  product      CoffeeProduct @relation(fields: [productId], references: [id])
}

model Recipe {
  id                 Int             @id @default(autoincrement())
  shareWithCommunity Boolean
  name               String
  notes              String?
  brewMethodId       Int
  hasFilter          Boolean
  filterType         String?
  cupsCount          Int
  traceabilityId     Int?
  coffeeProductId    Int?
  roastLevel         RoastLevel
  coffeeSize         Float
  waterSize          Float
  ratio              Float
  temperature        Float
  temperatureUnit    TemperatureUnit
  grindSize          GrindSize
  steps              Step[]
  coffeeProduct      CoffeeProduct?  @relation(fields: [coffeeProductId], references: [id])
  brewMethod         BrewMethod      @relation(fields: [brewMethodId], references: [id])
}

model Step {
  id       Int      @id @default(autoincrement())
  recipeId Int
  stepType StepType
  amount   Float
  duration Int
  notes    String?
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
}

model Traceability {
  id             Int             @id @default(autoincrement())
  region         String
  variety        String
  process        String
  altitude       String
  coffeeProducts CoffeeProduct[]
}

enum RoastLevel {
  LIGHT
  MEDIUM_LIGHT
  MEDIUM
  MEDIUM_DARK
  DARK
}

enum TemperatureUnit {
  C
  F
}

enum GrindSize {
  COARSE
  MEDIUM_COARSE
  MEDIUM
  MEDIUM_FINE
  FINE
}

enum StepType {
  BLOOM
  POUR
  STIR
  PREPARE
  WAIT
}
